using System;
using System.Collections.Generic;
using System.Linq;
using Mutagen.Bethesda;
using Mutagen.Bethesda.Synthesis;
using Mutagen.Bethesda.Skyrim;
using System.Threading.Tasks;

namespace Radial_Blur_Remover
{
    public class Program
    {
        static Lazy<Settings> Settings = null!;

        public static async Task<int> Main(string[] args)
        {
            return await SynthesisPipeline.Instance
                .AddPatch<ISkyrimMod, ISkyrimModGetter>(RunPatch)
				.SetAutogeneratedSettings(
					nickname: "Settings",
					path: "settings.json",
					out Settings)
				.SetTypicalOpen(GameRelease.SkyrimSE, "Radial Blur Remover.esp")
                .Run(args);
        }

        public static void RunPatch(IPatcherState<ISkyrimMod, ISkyrimModGetter> state)
        {
            var formKeyBlacklist = Settings.Value.blacklist.Select(x => x.FormKey);
			foreach (var imadGetter in state.LoadOrder.PriorityOrder.WinningOverrides<IImageSpaceAdapterGetter>())
			{
				// Don't touch ones on blacklist
				if (formKeyBlacklist.Contains(imadGetter.FormKey))
					continue;

				// Some variables
				var imad = imadGetter.DeepCopy();
                bool changed = false;
                var emptyBlurList = Enumerable.Empty<KeyFrame>();

                // Change the value of all radial blur frames to 0
                var radialBlurFrames = (imad.RadialBlurDownStart ?? emptyBlurList)
                    .Concat(imad.RadialBlurRampDown ?? emptyBlurList)
                    .Concat(imad.RadialBlurRampUp ?? emptyBlurList)
                    .Concat(imad.RadialBlurStart ?? emptyBlurList)
                    .Concat(imad.RadialBlurStrength ?? emptyBlurList);

                foreach (var frame in radialBlurFrames.Where(x => x.Value != 0f))
				{
                    changed = true;
                    frame.Value = 0f;
				}

                // Set to patch if anything changed
                if (changed)
                    state.PatchMod.ImageSpaceAdapters.Set(imad);
			}
        }
    }
}
